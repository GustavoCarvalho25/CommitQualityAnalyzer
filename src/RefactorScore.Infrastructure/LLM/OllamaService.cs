using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Json;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using RefactorScore.Core.Entities;
using RefactorScore.Core.Interfaces;
using System.Text.RegularExpressions;
using System.Linq;

namespace RefactorScore.Infrastructure.LLM
{
    /// <summary>
    /// Implementa√ß√£o do servi√ßo LLM utilizando Ollama
    /// </summary>
    public class OllamaService : ILLMService
    {
        private readonly HttpClient _httpClient;
        private readonly OllamaOptions _options;
        private readonly ILogger<OllamaService> _logger;
        private readonly PromptTemplates _promptTemplates;
        
        public OllamaService(HttpClient httpClient, IOptions<OllamaOptions> options, 
            ILogger<OllamaService> logger, PromptTemplates promptTemplates)
        {
            _httpClient = httpClient;
            _options = options.Value;
            _logger = logger;
            _promptTemplates = promptTemplates;
            
            // Configurar o client HTTP com a URL base do Ollama
            _httpClient.BaseAddress = new Uri(_options.BaseUrl);
            
            // Garantir que o timeout do HttpClient est√° configurado corretamente
            _httpClient.Timeout = TimeSpan.FromSeconds(_options.TimeoutSegundos);
            
            _logger.LogInformation("ü§ñ Servi√ßo Ollama inicializado com base URL: {BaseUrl}", _options.BaseUrl);
            _logger.LogInformation("‚è±Ô∏è Timeout configurado: {TimeoutSegundos} segundos", _options.TimeoutSegundos);
            _logger.LogInformation("‚è±Ô∏è HttpClient Timeout: {HttpClientTimeout} segundos", _httpClient.Timeout.TotalSeconds);
        }
        
        /// <inheritdoc/>
        public async Task<bool> IsAvailableAsync()
        {
            try
            {
                _logger.LogInformation("üîç Verificando disponibilidade do servi√ßo Ollama em {BaseUrl}", _options.BaseUrl);
                var modelos = await ObterModelosDisponiveisAsync();
                
                bool disponivel = modelos.Count > 0;
                
                if (disponivel)
                {
                    _logger.LogInformation("‚úÖ Servi√ßo Ollama est√° dispon√≠vel. Encontrados {NumModelos} modelos.", modelos.Count);
                }
                else
                {
                    _logger.LogWarning("‚ö†Ô∏è Servi√ßo Ollama n√£o est√° dispon√≠vel. Nenhum modelo encontrado.");
                }
                
                return disponivel;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Erro ao verificar disponibilidade do servi√ßo Ollama");
                return false;
            }
        }
        
        /// <inheritdoc/>
        public async Task<string> ProcessarPromptAsync(
            string prompt, 
            string? modelo = null, 
            float temperatura = 0.1f, 
            int maxTokens = 2048)
        {
            try
            {
                // Usar o modelo configurado se n√£o for especificado
                string modeloAtual = string.IsNullOrEmpty(modelo) 
                    ? _options.ModeloPadrao 
                    : modelo;
                
                _logger.LogInformation("ü§ñ Processando prompt usando modelo {Modelo} (temperatura: {Temperatura}, maxTokens: {MaxTokens})", 
                    modeloAtual, temperatura, maxTokens);
                
                // Verificar se o modelo est√° dispon√≠vel
                _logger.LogInformation("üîç Verificando disponibilidade do modelo {Modelo}", modeloAtual);
                if (!await VerificarModeloDisponivelAsync(modeloAtual))
                {
                    _logger.LogError("‚ùå Modelo '{Modelo}' n√£o est√° dispon√≠vel", modeloAtual);
                    throw new InvalidOperationException($"Modelo '{modeloAtual}' n√£o est√° dispon√≠vel");
                }
                
                // Preparar a requisi√ß√£o para o Ollama
                var request = new OllamaRequest
                {
                    Model = modeloAtual,
                    Prompt = prompt,
                    Temperature = temperatura,
                    MaxTokens = maxTokens,
                    Stream = false
                };
                
                // Fazer a requisi√ß√£o
                _logger.LogInformation("üì§ Enviando requisi√ß√£o para Ollama API (tamanho do prompt: {TamanhoPrompt} caracteres)", 
                    prompt.Length);
                
                var startTime = DateTime.UtcNow;
                var response = await _httpClient.PostAsJsonAsync("/api/generate", request);
                
                // Verificar o resultado da requisi√ß√£o
                if (!response.IsSuccessStatusCode)
                {
                    _logger.LogError("‚ùå Falha na requisi√ß√£o ao Ollama: {StatusCode} - {ReasonPhrase}", 
                        (int)response.StatusCode, response.ReasonPhrase);
                    response.EnsureSuccessStatusCode(); // Isso vai lan√ßar uma exce√ß√£o com os detalhes
                }
                
                // Processar a resposta
                var ollamaResponse = await response.Content.ReadFromJsonAsync<OllamaResponse>();
                var responseTime = DateTime.UtcNow - startTime;
                
                _logger.LogInformation("üì• Resposta recebida do Ollama em {ResponseTime:N2}s (tamanho: {TamanhoResposta} caracteres, tokens gerados: {TokensGerados})", 
                    responseTime.TotalSeconds,
                    ollamaResponse?.Response?.Length ?? 0,
                    ollamaResponse?.EvalCount ?? 0);
                
                return ollamaResponse?.Response ?? string.Empty;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Erro ao processar prompt no Ollama");
                throw;
            }
        }
        
        /// <inheritdoc/>
        public async Task<CodigoLimpo> AnalisarCodigoAsync(
            string codigo, 
            string linguagem, 
            string? contexto = null)
        {
            try
            {
                _logger.LogInformation("üîç Iniciando an√°lise de c√≥digo na linguagem {Linguagem}", linguagem);
                
                // Verificar se o c√≥digo √© muito grande para processar de uma vez
                const int TAMANHO_MAXIMO_CHUNK = 7000;
                if (codigo.Length > TAMANHO_MAXIMO_CHUNK)
                {
                    _logger.LogWarning("‚ö†Ô∏è C√≥digo muito grande ({TamanhoTotal} caracteres). Dividindo em chunks para evitar timeout.", 
                        codigo.Length);
                    return await AnalisarCodigoGrandeEmChunksAsync(codigo, linguagem, contexto);
                }
                
                // Construir o prompt usando o template de an√°lise de c√≥digo
                string prompt = _promptTemplates.AnaliseCodigo
                    .Replace("{{CODIGO}}", codigo)
                    .Replace("{{LINGUAGEM}}", linguagem)
                    .Replace("{{CONTEXTO}}", contexto ?? "Nenhum contexto adicional fornecido.");
                
                _logger.LogInformation("ü§ñ Preparando an√°lise de c√≥digo: {TamanhoArquivo} caracteres, linguagem: {Linguagem}", 
                    codigo.Length, linguagem);
                
                // Enviar para o LLM
                string resposta = await ProcessarPromptAsync(prompt, _options.ModeloAnalise);
                
                // Processar a resposta para extrair a an√°lise formatada
                _logger.LogInformation("üîÑ Processando resposta de an√°lise de c√≥digo");
                var analise = await ProcessarRespostaAnalise(resposta);
                
                _logger.LogInformation("‚úÖ An√°lise de c√≥digo conclu√≠da. Nota geral: {NotaGeral:F1}", analise.NotaGeral);
                
                return analise;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Erro ao analisar c√≥digo no Ollama");
                throw;
            }
        }
        
        /// <summary>
        /// Analisa c√≥digo grande dividindo-o em chunks para evitar timeouts
        /// </summary>
        private async Task<CodigoLimpo> AnalisarCodigoGrandeEmChunksAsync(
            string codigo, 
            string linguagem, 
            string? contexto = null)
        {
            try
            {
                _logger.LogInformation("üîÑ Iniciando an√°lise de c√≥digo grande em chunks");
                
                // Dividir o c√≥digo em chunks
                var chunks = DividirCodigoEmChunks(codigo, 7000);
                _logger.LogInformation("üìä C√≥digo dividido em {NumeroChunks} chunks", chunks.Count);
                
                // Analisar cada chunk separadamente
                var resultadosChunks = new List<CodigoLimpo>();
                int chunkAtual = 0;
                
                foreach (var chunk in chunks)
                {
                    chunkAtual++;
                    _logger.LogInformation("üîç Analisando chunk {ChunkAtual}/{TotalChunks} (tamanho: {TamanhoChunk} caracteres)",
                        chunkAtual, chunks.Count, chunk.Length);
                    
                    // Adicionar contexto sobre o chunking
                    string contextoChunk = $"{contexto ?? "Nenhum contexto adicional."} Este √© o chunk {chunkAtual} de {chunks.Count} do arquivo completo.";
                    
                    // Analisar o chunk
                    try
                    {
                        // Construir o prompt para o chunk
                        string prompt = _promptTemplates.AnaliseCodigo
                            .Replace("{{CODIGO}}", chunk)
                            .Replace("{{LINGUAGEM}}", linguagem)
                            .Replace("{{CONTEXTO}}", contextoChunk);
                        
                        // Enviar para o LLM com timeout reduzido para chunks
                        string resposta = await ProcessarPromptAsync(prompt, _options.ModeloAnalise, 0.1f, 
                            Math.Min(2048, _options.MaxTokens));
                        
                        // Processar a resposta
                        var analiseChunk = await ProcessarRespostaAnalise(resposta);
                        
                        if (analiseChunk != null)
                        {
                            resultadosChunks.Add(analiseChunk);
                            _logger.LogInformation("‚úÖ Chunk {ChunkAtual} analisado com sucesso. Nota: {NotaGeral:F1}", 
                                chunkAtual, analiseChunk.NotaGeral);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, "‚ùå Erro ao analisar chunk {ChunkAtual}", chunkAtual);
                        // Continuar para o pr√≥ximo chunk mesmo em caso de erro
                    }
                }
                
                // Se n√£o conseguimos analisar nenhum chunk, retornar objeto padr√£o
                if (resultadosChunks.Count == 0)
                {
                    _logger.LogWarning("‚ö†Ô∏è N√£o foi poss√≠vel analisar nenhum chunk do c√≥digo. Usando valores padr√£o.");
                    return CriarCodigoLimpoPadrao("Falha ao analisar todos os chunks");
                }
                
                // Combinar os resultados dos chunks
                var resultadoCombinado = CombinarResultadosChunks(resultadosChunks);
                
                _logger.LogInformation("‚úÖ An√°lise combinada de {NumChunks} chunks conclu√≠da. Nota geral: {NotaGeral:F1}", 
                    resultadosChunks.Count, resultadoCombinado.NotaGeral);
                
                return resultadoCombinado;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Erro ao analisar c√≥digo grande em chunks");
                throw;
            }
        }
        
        /// <summary>
        /// Divide um c√≥digo em chunks inteligentes, tentando manter a integridade das fun√ß√µes
        /// </summary>
        private List<string> DividirCodigoEmChunks(string codigo, int tamanhoMaximoChunk)
        {
            var chunks = new List<string>();
            
            // Se o c√≥digo j√° √© pequeno o suficiente, retornar como um √∫nico chunk
            if (codigo.Length <= tamanhoMaximoChunk)
            {
                chunks.Add(codigo);
                return chunks;
            }
            
            // Dividir o c√≥digo em linhas
            string[] linhas = codigo.Split('\n');
            
            StringBuilder chunkAtual = new StringBuilder();
            int contadorChars = 0;
            
            foreach (var linha in linhas)
            {
                int tamanhoLinha = linha.Length + 1; // +1 para o \n
                
                // Se adicionar esta linha excederia o tamanho m√°ximo e j√° temos algum conte√∫do,
                // adicionar o chunk atual √† lista e come√ßar um novo
                if (contadorChars + tamanhoLinha > tamanhoMaximoChunk && chunkAtual.Length > 0)
                {
                    chunks.Add(chunkAtual.ToString());
                    chunkAtual.Clear();
                    contadorChars = 0;
                }
                
                // Adicionar a linha ao chunk atual
                chunkAtual.AppendLine(linha);
                contadorChars += tamanhoLinha;
            }
            
            // Adicionar o √∫ltimo chunk se tiver conte√∫do
            if (chunkAtual.Length > 0)
            {
                chunks.Add(chunkAtual.ToString());
            }
            
            return chunks;
        }
        
        /// <summary>
        /// Combina os resultados da an√°lise de m√∫ltiplos chunks
        /// </summary>
        private CodigoLimpo CombinarResultadosChunks(List<CodigoLimpo> resultados)
        {
            // Se houver apenas um resultado, retorn√°-lo diretamente
            if (resultados.Count == 1)
                return resultados[0];
            
            // Calcular m√©dias para cada m√©trica
            double somaVariaveis = 0;
            double somaFuncoes = 0;
            double somaComentarios = 0;
            double somaCoesao = 0;
            double somaCodigoMorto = 0;
            
            // Coletar justificativas de todos os chunks
            var todasJustificativas = new Dictionary<string, List<string>>
            {
                { "NomenclaturaVariaveis", new List<string>() },
                { "TamanhoFuncoes", new List<string>() },
                { "UsoComentariosRelevantes", new List<string>() },
                { "CoesaoMetodos", new List<string>() },
                { "EvitacaoCodigoMorto", new List<string>() }
            };
            
            foreach (var resultado in resultados)
            {
                somaVariaveis += resultado.NomenclaturaVariaveis;
                somaFuncoes += resultado.TamanhoFuncoes;
                somaComentarios += resultado.UsoComentariosRelevantes;
                somaCoesao += resultado.CoesaoMetodos;
                somaCodigoMorto += resultado.EvitacaoCodigoMorto;
                
                // Coletar justificativas (se dispon√≠veis)
                if (resultado.Justificativas != null)
                {
                    if (resultado.Justificativas.TryGetValue("NomenclaturaVariaveis", out var justificativa))
                        todasJustificativas["NomenclaturaVariaveis"].Add(justificativa);
                    
                    if (resultado.Justificativas.TryGetValue("TamanhoFuncoes", out justificativa))
                        todasJustificativas["TamanhoFuncoes"].Add(justificativa);
                    
                    if (resultado.Justificativas.TryGetValue("UsoComentariosRelevantes", out justificativa))
                        todasJustificativas["UsoComentariosRelevantes"].Add(justificativa);
                    
                    if (resultado.Justificativas.TryGetValue("CoesaoMetodos", out justificativa))
                        todasJustificativas["CoesaoMetodos"].Add(justificativa);
                    
                    if (resultado.Justificativas.TryGetValue("EvitacaoCodigoMorto", out justificativa))
                        todasJustificativas["EvitacaoCodigoMorto"].Add(justificativa);
                }
            }
            
            // Calcular m√©dias
            int count = resultados.Count;
            double notaVariaveis = Math.Round(somaVariaveis / count, 1);
            double notaFuncoes = Math.Round(somaFuncoes / count, 1);
            double notaComentarios = Math.Round(somaComentarios / count, 1);
            double notaCoesao = Math.Round(somaCoesao / count, 1);
            double notaCodigoMorto = Math.Round(somaCodigoMorto / count, 1);
            
            // Consolidar justificativas (pegar a primeira n√£o vazia ou combinar at√© 2)
            var justificativasFinal = new Dictionary<string, string>();
            
            foreach (var categoria in todasJustificativas.Keys)
            {
                var justificativasCategoria = todasJustificativas[categoria]
                    .Where(j => !string.IsNullOrWhiteSpace(j))
                    .Take(2)
                    .ToList();
                
                if (justificativasCategoria.Count > 0)
                {
                    justificativasFinal[categoria] = string.Join(" ", justificativasCategoria);
                }
                else
                {
                    justificativasFinal[categoria] = "An√°lise baseada em m√∫ltiplos chunks do c√≥digo.";
                }
            }
            
            // Incluir informa√ß√£o sobre o processo de chunking
            justificativasFinal["Observacao"] = $"Esta an√°lise foi combinada a partir de {count} chunks do c√≥digo original.";
            
            // Criar o objeto final
            return new CodigoLimpo
            {
                NomenclaturaVariaveis = (int)notaVariaveis,
                TamanhoFuncoes = (int)notaFuncoes,
                UsoComentariosRelevantes = (int)notaComentarios,
                CoesaoMetodos = (int)notaCoesao,
                EvitacaoCodigoMorto = (int)notaCodigoMorto,
                Justificativas = justificativasFinal
            };
        }
        
        /// <inheritdoc/>
        public async Task<List<Recomendacao>> GerarRecomendacoesAsync(CodigoLimpo analise, 
            string codigo, string linguagem)
        {
            try
            {
                _logger.LogInformation("üîç Iniciando gera√ß√£o de recomenda√ß√µes para c√≥digo na linguagem {Linguagem}", linguagem);
                
                // Verificar se o c√≥digo √© muito grande para processar de uma vez
                const int TAMANHO_MAXIMO_CHUNK = 7000;
                if (codigo.Length > TAMANHO_MAXIMO_CHUNK)
                {
                    _logger.LogWarning("‚ö†Ô∏è C√≥digo muito grande ({TamanhoTotal} caracteres) para recomenda√ß√µes. Dividindo em chunks para evitar timeout.", 
                        codigo.Length);
                    return await GerarRecomendacoesEmChunksAsync(analise, codigo, linguagem);
                }
                
                // Criar um JSON com a an√°lise para incluir no prompt
                string analiseJson = JsonSerializer.Serialize(analise);
                
                // Construir o prompt usando o template de recomenda√ß√µes
                string prompt = _promptTemplates.Recomendacoes
                    .Replace("{{ANALISE}}", analiseJson)
                    .Replace("{{CODIGO}}", codigo)
                    .Replace("{{LINGUAGEM}}", linguagem);
                
                _logger.LogInformation("ü§ñ Preparando gera√ß√£o de recomenda√ß√µes para arquivo de {TamanhoArquivo} caracteres", 
                    codigo.Length);
                
                // Enviar para o LLM
                string resposta = await ProcessarPromptAsync(prompt, _options.ModeloRecomendacoes);
                
                // Processar a resposta para extrair as recomenda√ß√µes
                _logger.LogInformation("üîÑ Processando resposta para extrair recomenda√ß√µes");
                var recomendacoes = await ProcessarRespostaRecomendacoes(resposta);
                
                _logger.LogInformation("‚úÖ Gera√ß√£o de recomenda√ß√µes conclu√≠da. Total de recomenda√ß√µes: {Total}", 
                    recomendacoes.Count);
                
                return recomendacoes;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Erro ao gerar recomenda√ß√µes no Ollama");
                throw;
            }
        }
        
        /// <summary>
        /// Gera recomenda√ß√µes para c√≥digo grande dividindo-o em chunks
        /// </summary>
        private async Task<List<Recomendacao>> GerarRecomendacoesEmChunksAsync(
            CodigoLimpo analiseCompleta, 
            string codigo, 
            string linguagem)
        {
            try
            {
                _logger.LogInformation("üîÑ Iniciando gera√ß√£o de recomenda√ß√µes em chunks");
                
                // Dividir o c√≥digo em chunks
                var chunks = DividirCodigoEmChunks(codigo, 7000);
                _logger.LogInformation("üìä C√≥digo dividido em {NumeroChunks} chunks para recomenda√ß√µes", chunks.Count);
                
                // Gerar recomenda√ß√µes para cada chunk separadamente
                var todasRecomendacoes = new List<Recomendacao>();
                int chunkAtual = 0;
                
                foreach (var chunk in chunks)
                {
                    chunkAtual++;
                    _logger.LogInformation("üîç Gerando recomenda√ß√µes para chunk {ChunkAtual}/{TotalChunks} (tamanho: {TamanhoChunk} caracteres)",
                        chunkAtual, chunks.Count, chunk.Length);
                    
                    // Adaptar a an√°lise para este chunk
                    var analiseChunk = new CodigoLimpo
                    {
                        NomenclaturaVariaveis = analiseCompleta.NomenclaturaVariaveis,
                        TamanhoFuncoes = analiseCompleta.TamanhoFuncoes,
                        UsoComentariosRelevantes = analiseCompleta.UsoComentariosRelevantes,
                        CoesaoMetodos = analiseCompleta.CoesaoMetodos,
                        EvitacaoCodigoMorto = analiseCompleta.EvitacaoCodigoMorto,
                        Justificativas = analiseCompleta.Justificativas
                    };
                    
                    // Adicionar informa√ß√£o sobre chunking √† an√°lise
                    if (analiseChunk.Justificativas == null)
                        analiseChunk.Justificativas = new Dictionary<string, string>();
                    
                    analiseChunk.Justificativas["Chunking"] = $"Este √© o chunk {chunkAtual} de {chunks.Count} do arquivo completo.";
                    
                    // Gerar recomenda√ß√µes para o chunk
                    try
                    {
                        // Serializar a an√°lise adaptada
                        string analiseJson = JsonSerializer.Serialize(analiseChunk);
                        
                        // Construir o prompt para o chunk
                        string prompt = _promptTemplates.Recomendacoes
                            .Replace("{{ANALISE}}", analiseJson)
                            .Replace("{{CODIGO}}", chunk)
                            .Replace("{{LINGUAGEM}}", linguagem);
                        
                        prompt += $"\n\nATEN√á√ÉO: Este √© o chunk {chunkAtual} de {chunks.Count} do arquivo completo. Gere recomenda√ß√µes espec√≠ficas para este trecho de c√≥digo.";
                        
                        // Enviar para o LLM com timeout reduzido para chunks
                        string resposta = await ProcessarPromptAsync(prompt, _options.ModeloRecomendacoes, 0.1f, 
                            Math.Min(2048, _options.MaxTokens));
                        
                        // Processar a resposta
                        var recomendacoesChunk = await ProcessarRespostaRecomendacoes(resposta);
                        
                        if (recomendacoesChunk != null && recomendacoesChunk.Count > 0)
                        {
                            // Adicionar informa√ß√£o sobre o chunk em cada recomenda√ß√£o
                            foreach (var recomendacao in recomendacoesChunk)
                            {
                                recomendacao.Titulo = $"[Chunk {chunkAtual}] {recomendacao.Titulo}";
                                
                                // Evitar duplica√ß√£o de recomenda√ß√µes muito similares
                                if (!ExisteRecomendacaoSimilar(todasRecomendacoes, recomendacao))
                                {
                                    todasRecomendacoes.Add(recomendacao);
                                }
                            }
                            
                            _logger.LogInformation("‚úÖ Geradas {NumRecomendacoes} recomenda√ß√µes para o chunk {ChunkAtual}", 
                                recomendacoesChunk.Count, chunkAtual);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, "‚ùå Erro ao gerar recomenda√ß√µes para chunk {ChunkAtual}", chunkAtual);
                        // Continuar para o pr√≥ximo chunk mesmo em caso de erro
                    }
                    
                    // Limitar o n√∫mero total de recomenda√ß√µes (m√°ximo 10)
                    if (todasRecomendacoes.Count >= 10)
                    {
                        _logger.LogInformation("üõë Limite de 10 recomenda√ß√µes atingido. Parando processamento de chunks.");
                        break;
                    }
                }
                
                // Se n√£o conseguimos gerar nenhuma recomenda√ß√£o, tentar uma abordagem mais gen√©rica
                if (todasRecomendacoes.Count == 0)
                {
                    _logger.LogWarning("‚ö†Ô∏è N√£o foi poss√≠vel gerar recomenda√ß√µes para nenhum chunk. Tentando uma abordagem mais gen√©rica.");
                    
                    // Tentar gerar recomenda√ß√µes com base apenas na an√°lise geral
                    try
                    {
                        string analiseJson = JsonSerializer.Serialize(analiseCompleta);
                        string promptGenerico = _promptTemplates.RecomendacoesGenericas
                            .Replace("{{ANALISE}}", analiseJson)
                            .Replace("{{LINGUAGEM}}", linguagem);
                        
                        string resposta = await ProcessarPromptAsync(promptGenerico, _options.ModeloRecomendacoes);
                        var recomendacoesGenericas = await ProcessarRespostaRecomendacoes(resposta);
                        
                        if (recomendacoesGenericas != null && recomendacoesGenericas.Count > 0)
                        {
                            todasRecomendacoes.AddRange(recomendacoesGenericas);
                            _logger.LogInformation("‚úÖ Geradas {NumRecomendacoes} recomenda√ß√µes gen√©ricas", 
                                recomendacoesGenericas.Count);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, "‚ùå Erro ao gerar recomenda√ß√µes gen√©ricas");
                    }
                }
                
                // Ordenar as recomenda√ß√µes por prioridade
                var recomendacoesOrdenadas = todasRecomendacoes
                    .OrderByDescending(r => r.Prioridade == "Alta" ? 3 : r.Prioridade == "M√©dia" ? 2 : 1)
                    .ToList();
                
                _logger.LogInformation("‚úÖ Gera√ß√£o de recomenda√ß√µes em chunks conclu√≠da. Total: {Total} recomenda√ß√µes", 
                    recomendacoesOrdenadas.Count);
                
                return recomendacoesOrdenadas;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Erro ao gerar recomenda√ß√µes em chunks");
                throw;
            }
        }
        
        /// <summary>
        /// Verifica se j√° existe uma recomenda√ß√£o similar na lista
        /// </summary>
        private bool ExisteRecomendacaoSimilar(List<Recomendacao> recomendacoes, Recomendacao novaRecomendacao)
        {
            // Simplificar o t√≠tulo para compara√ß√£o (remover prefixo de chunk)
            string tituloSimplificado = novaRecomendacao.Titulo;
            if (tituloSimplificado.Contains("]"))
            {
                tituloSimplificado = tituloSimplificado.Substring(tituloSimplificado.IndexOf("]") + 1).Trim();
            }
            
            // Verificar se j√° existe recomenda√ß√£o com t√≠tulo similar
            foreach (var recomendacao in recomendacoes)
            {
                string tituloExistente = recomendacao.Titulo;
                if (tituloExistente.Contains("]"))
                {
                    tituloExistente = tituloExistente.Substring(tituloExistente.IndexOf("]") + 1).Trim();
                }
                
                // Comparar t√≠tulos simplificados e tipos
                if ((tituloExistente.Contains(tituloSimplificado) || 
                     tituloSimplificado.Contains(tituloExistente)) &&
                    recomendacao.Tipo == novaRecomendacao.Tipo)
                {
                    return true;
                }
            }
            
            return false;
        }
        
        /// <inheritdoc/>
        public async Task<List<string>> ObterModelosDisponiveisAsync()
        {
            try
            {
                _logger.LogInformation("üîç Buscando modelos dispon√≠veis no Ollama");
                
                var response = await _httpClient.GetFromJsonAsync<OllamaModelosResponse>("/api/tags");
                
                if (response?.Models == null)
                {
                    _logger.LogWarning("‚ö†Ô∏è Nenhum modelo encontrado no Ollama");
                    return new List<string>();
                }
                
                var modelos = new List<string>();
                foreach (var modelo in response.Models)
                {
                    modelos.Add(modelo.Name);
                }
                
                _logger.LogInformation("üìã Encontrados {Total} modelos no Ollama: {ModelosList}", 
                    modelos.Count, string.Join(", ", modelos));
                
                return modelos;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Erro ao obter modelos dispon√≠veis no Ollama");
                return new List<string>();
            }
        }
        
        /// <inheritdoc/>
        public async Task<bool> VerificarModeloDisponivelAsync(string nomeModelo)
        {
            try
            {
                _logger.LogInformation("üîç Verificando disponibilidade do modelo {NomeModelo}", nomeModelo);
                
                var modelos = await ObterModelosDisponiveisAsync();
                bool disponivel = modelos.Contains(nomeModelo);
                
                if (disponivel)
                {
                    _logger.LogInformation("‚úÖ Modelo {NomeModelo} est√° dispon√≠vel", nomeModelo);
                }
                else
                {
                    _logger.LogWarning("‚ö†Ô∏è Modelo {NomeModelo} n√£o est√° dispon√≠vel. Modelos dispon√≠veis: {ModelosDisponiveis}", 
                        nomeModelo, string.Join(", ", modelos));
                }
                
                return disponivel;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Erro ao verificar disponibilidade do modelo {NomeModelo}", nomeModelo);
                return false;
            }
        }
        
        #region M√©todos Auxiliares
        
        /// <summary>
        /// Processa a resposta da an√°lise de c√≥digo e retorna um objeto CodigoLimpo
        /// </summary>
        private async Task<CodigoLimpo> ProcessarRespostaAnalise(string resposta)
        {
            const int MAX_TENTATIVAS = 3;
            int tentativas = 0;
            
            string jsonContent = string.Empty;
            // Tentar extrair JSON da resposta
            int startIndex = resposta.IndexOf('{');
            int endIndex = resposta.LastIndexOf('}');
            
            if (startIndex >= 0 && endIndex > startIndex)
            {
                jsonContent = resposta.Substring(startIndex, endIndex - startIndex + 1);
                // Limpar tokens especiais e formata√ß√£o markdown
                jsonContent = LimparFormatacaoETokens(jsonContent);
            }
            else
            {
                _logger.LogWarning("‚ö†Ô∏è N√£o foi poss√≠vel encontrar objeto JSON na resposta de an√°lise. Usando valores padr√£o.");
                return CriarCodigoLimpoPadrao("N√£o foi poss√≠vel extrair JSON da resposta");
            }
            
            while (tentativas < MAX_TENTATIVAS)
            {
                tentativas++;
                try
                {
                    _logger.LogInformation("üîÑ Tentativa {Tentativa}/{MaxTentativas} de deserializar an√°lise (tamanho: {TamanhoJson} caracteres)", 
                        tentativas, MAX_TENTATIVAS, jsonContent.Length);
                    
                    // Deserializar o JSON para um objeto CodigoLimpo
                    var analise = JsonSerializer.Deserialize<CodigoLimpo>(jsonContent, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });
                    
                    if (analise != null)
                    {
                        return analise;
                    }
                    else
                    {
                        _logger.LogWarning("‚ö†Ô∏è Deserializa√ß√£o resultou em objeto nulo");
                        if (tentativas >= MAX_TENTATIVAS)
                            return CriarCodigoLimpoPadrao("Deserializa√ß√£o resultou em objeto nulo");
                    }
                }
                catch (JsonException jsonEx)
                {
                    _logger.LogWarning("‚ö†Ô∏è Erro ao deserializar JSON de an√°lise (tentativa {Tentativa}/{MaxTentativas}): {Erro}", 
                        tentativas, MAX_TENTATIVAS, jsonEx.Message);
                    
                    if (tentativas < MAX_TENTATIVAS)
                    {
                        // Em vez de tentar corrigir localmente, pedir ao LLM para corrigir o JSON
                        _logger.LogInformation("ü§ñ Solicitando ao LLM para corrigir o JSON com problemas");
                        jsonContent = await SolicitarCorrecaoJsonAnaliseAoLLM(jsonContent, jsonEx.Message);
                    }
                    else
                    {
                        _logger.LogError(jsonEx, "‚ùå Todas as tentativas de corre√ß√£o de JSON falharam");
                        return CriarCodigoLimpoPadrao($"Erro ao deserializar: {jsonEx.Message}");
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "‚ùå Erro ao processar resposta de an√°lise (tentativa {Tentativa}/{MaxTentativas})", 
                        tentativas, MAX_TENTATIVAS);
                    
                    return CriarCodigoLimpoPadrao($"Erro: {ex.Message}");
                }
            }
            
            // N√£o deveria chegar aqui, mas por seguran√ßa
            return CriarCodigoLimpoPadrao("N√∫mero m√°ximo de tentativas excedido");
        }
        
        /// <summary>
        /// Cria um objeto CodigoLimpo com valores padr√£o
        /// </summary>
        private CodigoLimpo CriarCodigoLimpoPadrao(string mensagemErro)
        {
            return new CodigoLimpo
            {
                NomenclaturaVariaveis = 5,
                TamanhoFuncoes = 5,
                UsoComentariosRelevantes = 5,
                CoesaoMetodos = 5,
                EvitacaoCodigoMorto = 5,
                Justificativas = new Dictionary<string, string>
                {
                    { "NomenclaturaVariaveis", "N√£o foi poss√≠vel analisar" },
                    { "TamanhoFuncoes", "N√£o foi poss√≠vel analisar" },
                    { "UsoComentariosRelevantes", "N√£o foi poss√≠vel analisar" },
                    { "CoesaoMetodos", "N√£o foi poss√≠vel analisar" },
                    { "EvitacaoCodigoMorto", "N√£o foi poss√≠vel analisar" },
                    { "Error", mensagemErro }
                }
            };
        }
        
        /// <summary>
        /// Solicita ao LLM para corrigir um JSON com problemas (para an√°lise)
        /// </summary>
        private async Task<string> SolicitarCorrecaoJsonAnaliseAoLLM(string jsonProblematico, string mensagemErro)
        {
            try
            {
                // Construir o prompt para corre√ß√£o de JSON
                string promptCorrecao = $@"
Voc√™ √© um especialista em formata√ß√£o e corre√ß√£o de JSON. Por favor, corrija o seguinte JSON que est√° com problemas de formata√ß√£o.
O erro reportado √©: {mensagemErro}

JSON com problemas:
```
{jsonProblematico}
```

INSTRU√á√ïES CR√çTICAS:
1. Retorne APENAS o JSON corrigido, sem nenhum texto antes ou depois.
2. N√ÉO use caracteres especiais Unicode ou caracteres de controle.
3. N√ÉO inclua tags como &lt;begin_of_sentence&gt;, &lt;|begin_of_sentence|&gt;, ou qualquer outra marca√ß√£o.
4. N√ÉO use formata√ß√£o markdown, coment√°rios, explica√ß√µes ou qualquer texto que n√£o seja parte do JSON.
5. N√ÉO inclua backticks (```) ou outros delimitadores de c√≥digo.
6. Use APENAS caracteres ASCII padr√£o no JSON.
7. Todos os campos de texto devem estar entre aspas duplas (""texto"").
8. Certifique-se de que o JSON √© um objeto v√°lido contendo os campos da an√°lise de c√≥digo.
9. Mantenha ao m√°ximo o conte√∫do original, corrigindo apenas a estrutura/sintaxe.
10. N√£o inclua caracteres de quebra de linha dentro de strings, use espa√ßos no lugar.

ERROS COMUNS A EVITAR:
- N√ÉO inclua caracteres especiais, tokens ou marca√ß√µes
- N√ÉO use aspas simples no lugar de aspas duplas
- N√ÉO deixe propriedades sem aspas
- N√ÉO use v√≠rgulas depois do √∫ltimo elemento de arrays ou objetos
- N√ÉO use barras invertidas desnecess√°rias
- N√ÉO use ':' em vez de '"":'

Retorne o JSON puro e corrigido:";

                // Usar temperatura mais baixa para corre√ß√µes mais precisas
                string respostaCorrecao = await ProcessarPromptAsync(promptCorrecao, _options.ModeloAnalise, 0.1f);
                
                // Extrair apenas o JSON da resposta
                int startIndex = respostaCorrecao.IndexOf('{');
                int endIndex = respostaCorrecao.LastIndexOf('}');
                
                if (startIndex >= 0 && endIndex > startIndex)
                {
                    string jsonCorrigido = respostaCorrecao.Substring(startIndex, endIndex - startIndex + 1);
                    
                    // Limpar tokens especiais que possam ter permanecido
                    jsonCorrigido = LimparFormatacaoETokens(jsonCorrigido);
                    
                    // Verificar estrutura b√°sica do JSON
                    if (jsonCorrigido.StartsWith("{") && jsonCorrigido.EndsWith("}") && 
                        (jsonCorrigido.Contains("\"nomenclaturaVariaveis\"") || jsonCorrigido.Contains("\"justificativas\"")))
                    {
                        _logger.LogInformation("‚úÖ JSON de an√°lise corrigido pelo LLM (tamanho: {TamanhoJson} caracteres)", jsonCorrigido.Length);
                        return jsonCorrigido;
                    }
                    else
                    {
                        _logger.LogWarning("‚ö†Ô∏è JSON de an√°lise corrigido n√£o tem a estrutura esperada");
                    }
                }
                
                _logger.LogWarning("‚ö†Ô∏è LLM n√£o conseguiu corrigir o JSON de an√°lise adequadamente");
                return jsonProblematico; // Retornar o original se n√£o conseguir extrair
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Erro ao solicitar corre√ß√£o de JSON de an√°lise ao LLM");
                return jsonProblematico; // Retornar o original em caso de erro
            }
        }
        
        /// <summary>
        /// Remove tokens especiais e formata√ß√£o markdown que podem interferir na desserializa√ß√£o do JSON
        /// </summary>
        private string LimparFormatacaoETokens(string json)
        {
            // Lista de tokens especiais conhecidos para remover
            string[] tokensParaRemover = new[]
            {
                "<|begin_of_sentence|>",
                "<|end_of_sentence|>",
                "<|endoftext|>",
                // Tokens especiais que aparecem em outros formatos (com caracteres unicode)
                "<\uff5cbegin\u2581of\u2581sentence\uff5c>",
                "<\uff5cend\u2581of\u2581sentence\uff5c>",
                "<\uff5cendoftext\uff5c>",
                // Formata√ß√£o markdown
                "```json",
                "```",
                "`"
            };
            
            string resultado = json;
            foreach (var token in tokensParaRemover)
            {
                resultado = resultado.Replace(token, "");
            }
            
            // Normalizar espa√ßos duplicados que podem ter sido criados
            resultado = Regex.Replace(resultado, @"\s+", " ");
            // Remover espa√ßos no in√≠cio e fim
            resultado = resultado.Trim();
            
            return resultado;
        }
        
        /// <summary>
        /// Processa a resposta de recomenda√ß√µes e retorna uma lista de objetos Recomendacao
        /// </summary>
        private async Task<List<Recomendacao>> ProcessarRespostaRecomendacoes(string resposta)
        {
            const int MAX_TENTATIVAS = 3;
            int tentativas = 0;
            
            string jsonContent = string.Empty;
            // Tentar extrair JSON da resposta
            int startIndex = resposta.IndexOf('[');
            int endIndex = resposta.LastIndexOf(']');
            
            if (startIndex >= 0 && endIndex > startIndex)
            {
                jsonContent = resposta.Substring(startIndex, endIndex - startIndex + 1);
                // Limpar tokens especiais que podem estar interferindo na desserializa√ß√£o
                jsonContent = LimparFormatacaoETokens(jsonContent);
            }
            else
            {
                _logger.LogWarning("‚ö†Ô∏è N√£o foi poss√≠vel encontrar array JSON na resposta de recomenda√ß√µes");
                return new List<Recomendacao>();
            }
            
            while (tentativas < MAX_TENTATIVAS)
            {
                tentativas++;
                try
                {
                    _logger.LogInformation("üîÑ Tentativa {Tentativa}/{MaxTentativas} de deserializar recomenda√ß√µes (tamanho: {TamanhoJson} caracteres)", 
                        tentativas, MAX_TENTATIVAS, jsonContent.Length);
                    
                    // Deserializar o JSON para uma lista de Recomendacao
                    var recomendacoes = JsonSerializer.Deserialize<List<Recomendacao>>(jsonContent, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    }) ?? new List<Recomendacao>();
                    
                    return recomendacoes;
                }
                catch (JsonException jsonEx)
                {
                    _logger.LogWarning("‚ö†Ô∏è Erro ao deserializar JSON de recomenda√ß√µes (tentativa {Tentativa}/{MaxTentativas}): {Erro}", 
                        tentativas, MAX_TENTATIVAS, jsonEx.Message);
                    
                    if (tentativas < MAX_TENTATIVAS)
                    {
                        // Em vez de tentar corrigir localmente, pedir ao LLM para corrigir o JSON
                        _logger.LogInformation("ü§ñ Solicitando ao LLM para corrigir o JSON com problemas");
                        jsonContent = await SolicitarCorrecaoJsonAoLLM(jsonContent, jsonEx.Message);
                    }
                    else
                    {
                        _logger.LogError(jsonEx, "‚ùå Todas as tentativas de corre√ß√£o de JSON falharam");
                        
                        // Retornar uma lista com uma recomenda√ß√£o de erro
                        return new List<Recomendacao>
                        {
                            new Recomendacao
                            {
                                Titulo = "Erro ao processar recomenda√ß√µes",
                                Descricao = $"Ocorreu um erro ao processar as recomenda√ß√µes: {jsonEx.Message}",
                                Prioridade = "Alta",
                                Tipo = "Erro",
                                Dificuldade = "N/A",
                                ReferenciaArquivo = "N/A",
                                RecursosEstudo = new List<string> { "N/A" }
                            }
                        };
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "‚ùå Erro ao processar resposta de recomenda√ß√µes (tentativa {Tentativa}/{MaxTentativas})", 
                        tentativas, MAX_TENTATIVAS);
                    
                    // Retornar uma lista com uma recomenda√ß√£o de erro
                    return new List<Recomendacao>
                    {
                        new Recomendacao
                        {
                            Titulo = "Erro ao processar recomenda√ß√µes",
                            Descricao = $"Ocorreu um erro ao processar as recomenda√ß√µes: {ex.Message}",
                            Prioridade = "Alta",
                            Tipo = "Erro",
                            Dificuldade = "N/A",
                            ReferenciaArquivo = "N/A",
                            RecursosEstudo = new List<string> { "N/A" }
                        }
                    };
                }
            }
            
            // N√£o deveria chegar aqui, mas por seguran√ßa
            return new List<Recomendacao>();
        }
        
        /// <summary>
        /// Solicita ao LLM para corrigir um JSON com problemas
        /// </summary>
        private async Task<string> SolicitarCorrecaoJsonAoLLM(string jsonProblematico, string mensagemErro)
        {
            try
            {
                // Construir o prompt para corre√ß√£o de JSON
                string promptCorrecao = $@"
Voc√™ √© um especialista em formata√ß√£o e corre√ß√£o de JSON. Por favor, corrija o seguinte JSON que est√° com problemas de formata√ß√£o.
O erro reportado √©: {mensagemErro}

JSON com problemas:
```
{jsonProblematico}
```

INSTRU√á√ïES CR√çTICAS:
1. Retorne APENAS o JSON corrigido, sem nenhum texto antes ou depois.
2. N√ÉO use caracteres especiais Unicode ou caracteres de controle.
3. N√ÉO inclua tags como &lt;begin_of_sentence&gt;, &lt;|begin_of_sentence|&gt;, ou qualquer outra marca√ß√£o.
4. N√ÉO use formata√ß√£o markdown, coment√°rios, explica√ß√µes ou qualquer texto que n√£o seja parte do JSON.
5. Use APENAS caracteres ASCII padr√£o no JSON.
6. Todos os campos de texto devem estar entre aspas duplas (""texto"").
7. Certifique-se de que o JSON √© um array v√°lido contendo objetos 'Recomendacao'.
8. Cada objeto deve ter TODAS as seguintes propriedades com os tipos corretos:
   - ""titulo"": string
   - ""descricao"": string
   - ""exemplo"": string
   - ""prioridade"": string
   - ""tipo"": string
   - ""dificuldade"": string
   - ""referenciaArquivo"": string
   - ""recursosEstudo"": array de strings
9. Mantenha ao m√°ximo o conte√∫do original, corrigindo apenas a estrutura/sintaxe.
10. N√£o inclua caracteres de quebra de linha dentro de strings, use espa√ßos no lugar.

ERROS COMUNS A EVITAR:
- N√ÉO inclua caracteres especiais, tokens ou marca√ß√µes como &lt;|begin_of_sentence|&gt;
- N√ÉO use aspas simples no lugar de aspas duplas
- N√ÉO deixe propriedades sem aspas
- N√ÉO use v√≠rgulas depois do √∫ltimo elemento de arrays ou objetos
- N√ÉO use barras invertidas desnecess√°rias
- N√ÉO use ':' em vez de '"":'

Retorne o JSON puro e corrigido:";

                // Usar temperatura mais baixa para corre√ß√µes mais precisas
                string respostaCorrecao = await ProcessarPromptAsync(promptCorrecao, _options.ModeloRecomendacoes, 0.1f);
                
                // Extrair apenas o JSON da resposta
                int startIndex = respostaCorrecao.IndexOf('[');
                int endIndex = respostaCorrecao.LastIndexOf(']');
                
                if (startIndex >= 0 && endIndex > startIndex)
                {
                    string jsonCorrigido = respostaCorrecao.Substring(startIndex, endIndex - startIndex + 1);
                    
                    // Limpar tokens especiais que possam ter permanecido
                    jsonCorrigido = LimparFormatacaoETokens(jsonCorrigido);
                    
                    // Verificar estrutura b√°sica do JSON
                    if (jsonCorrigido.StartsWith("[") && jsonCorrigido.EndsWith("]") && jsonCorrigido.Contains("\"titulo\""))
                    {
                        _logger.LogInformation("‚úÖ JSON corrigido pelo LLM (tamanho: {TamanhoJson} caracteres)", jsonCorrigido.Length);
                        return jsonCorrigido;
                    }
                    else
                    {
                        _logger.LogWarning("‚ö†Ô∏è JSON corrigido n√£o tem a estrutura esperada");
                    }
                }
                
                _logger.LogWarning("‚ö†Ô∏è LLM n√£o conseguiu corrigir o JSON adequadamente");
                return jsonProblematico; // Retornar o original se n√£o conseguir extrair
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Erro ao solicitar corre√ß√£o de JSON ao LLM");
                return jsonProblematico; // Retornar o original em caso de erro
            }
        }
        
        #endregion
    }
    
    #region Classes de Apoio
    
    /// <summary>
    /// Op√ß√µes de configura√ß√£o para o servi√ßo Ollama
    /// </summary>
    public class OllamaOptions
    {
        public string BaseUrl { get; set; } = "http://localhost:11434";
        public string ModeloPadrao { get; set; } = "deepseek-coder:6.7b-instruct-q4_0";
        public string ModeloAnalise { get; set; } = "deepseek-coder:6.7b-instruct-q4_0";
        public string ModeloRecomendacoes { get; set; } = "deepseek-coder:6.7b-instruct-q4_0";
        public int TimeoutSegundos { get; set; } = 600;
        public int MaxTokens { get; set; } = 2048;
    }
    
    /// <summary>
    /// Templates de prompts para diferentes tarefas
    /// </summary>
    public class PromptTemplates
    {
        /// <summary>
        /// Template para an√°lise de c√≥digo
        /// </summary>
        public string AnaliseCodigo { get; set; } = @"
Voc√™ √© um especialista em an√°lise de c√≥digo e boas pr√°ticas de programa√ß√£o. Analise o c√≥digo abaixo e avalie-o segundo os princ√≠pios de c√≥digo limpo e boas pr√°ticas.

Linguagem: {{LINGUAGEM}}

Contexto adicional: {{CONTEXTO}}

C√≥digo a ser analisado:
```
{{CODIGO}}
```

Avalie cada um dos seguintes crit√©rios de 0 a 10 (onde 0 √© p√©ssimo e 10 √© excelente):
1. Nomenclatura de vari√°veis, fun√ß√µes e classes
2. Tamanho e responsabilidade √∫nica de fun√ß√µes
3. Uso adequado de coment√°rios e documenta√ß√£o
4. Coes√£o de m√©todos e classes
5. Aus√™ncia de c√≥digo morto ou redundante

Para cada crit√©rio, forne√ßa uma breve justificativa.

IMPORTANTE: Responda APENAS em formato JSON, sem texto adicional antes ou depois. Forne√ßa apenas o objeto JSON puro, sem formata√ß√£o markdown ou explica√ß√µes.

Formato √∫nico e esperado (n√£o fuja desse formato do JSON):

{
  ""nomenclaturaVariaveis"": numero,
  ""tamanhoFuncoes"": numero,
  ""usoComentariosRelevantes"": numero,
  ""coesaoMetodos"": numero,
  ""evitacaoCodigoMorto"": numero,
  ""justificativas"": {
    ""nomenclaturaVariaveis"": ""Descri√ß√£o do crit√©rio de nomenclatura"",
    ""tamanhoFuncoes"": ""Descri√ß√£o do crit√©rio de tamanho"",
    ""usoComentariosRelevantes"": ""Descri√ß√£o do crit√©rio de coment√°rios"",
    ""coesaoMetodos"": ""Descri√ß√£o do crit√©rio de coes√£o"",
    ""evitacaoCodigoMorto"": ""Descri√ß√£o do crit√©rio de c√≥digo morto""
  }
}";
        
        /// <summary>
        /// Template para gera√ß√£o de recomenda√ß√µes
        /// </summary>
        public string Recomendacoes { get; set; } = @"
Voc√™ √© um tutor de programa√ß√£o experiente. Com base na an√°lise de c√≥digo abaixo, gere recomenda√ß√µes educativas para ajudar o desenvolvedor a melhorar seu c√≥digo e aprender melhores pr√°ticas.

Linguagem: {{LINGUAGEM}}

An√°lise do c√≥digo:
{{ANALISE}}

C√≥digo analisado:
```
{{CODIGO}}
```

Forne√ßa 3-5 recomenda√ß√µes espec√≠ficas, priorizando os aspectos que mais precisam de melhoria conforme indicado na an√°lise. Cada recomenda√ß√£o deve:
1. Focar em um problema ou oportunidade de melhoria espec√≠fica
2. Explicar o impacto positivo da mudan√ßa
3. Incluir um exemplo concreto de como implementar a melhoria
4. Fornecer links ou recursos para aprendizado adicional

IMPORTANTE: Responda APENAS em formato JSON, sem texto adicional antes ou depois. Forne√ßa apenas o array JSON puro, sem formata√ß√£o markdown ou explica√ß√µes.

Formato √∫nico e esperado (n√£o fuja desse formato do JSON):
[
  {
    ""titulo"": ""Melhore a nomenclatura de vari√°veis"",
    ""descricao"": ""Vari√°veis como 'x' e 'temp' n√£o comunicam seu prop√≥sito. Nomes descritivos melhoram a legibilidade e manuten√ß√£o do c√≥digo."",
    ""exemplo"": ""Em vez de 'int x = calcularTotal();', use 'int totalProdutos = calcularTotalProdutos();'"",
    ""prioridade"": ""Alta"",
    ""tipo"": ""Nomenclatura"",
    ""dificuldade"": ""F√°cil"",
    ""referenciaArquivo"": ""linha 25-30"",
    ""recursosEstudo"": [""https://cleancoders.com/resources/naming-variables"", ""https://refactoring.guru/renaming""]
  }
]";

        /// <summary>
        /// Template para gera√ß√£o de recomenda√ß√µes gen√©ricas (sem c√≥digo espec√≠fico)
        /// </summary>
        public string RecomendacoesGenericas { get; set; } = @"
Voc√™ √© um tutor de programa√ß√£o experiente. Com base na an√°lise de c√≥digo abaixo, gere recomenda√ß√µes educativas gen√©ricas para ajudar o desenvolvedor a melhorar seu c√≥digo e aprender melhores pr√°ticas.

Linguagem: {{LINGUAGEM}}

An√°lise do c√≥digo:
{{ANALISE}}

Forne√ßa 3-5 recomenda√ß√µes gen√©ricas, priorizando os aspectos que mais precisam de melhoria conforme indicado na an√°lise. Como voc√™ n√£o tem acesso ao c√≥digo espec√≠fico, foque em princ√≠pios gerais e boas pr√°ticas para a linguagem mencionada.

Cada recomenda√ß√£o deve:
1. Focar em um problema ou oportunidade de melhoria que provavelmente existe no c√≥digo
2. Explicar o impacto positivo da mudan√ßa
3. Incluir um exemplo gen√©rico de como implementar a melhoria
4. Fornecer links ou recursos para aprendizado adicional

IMPORTANTE: Responda APENAS em formato JSON, sem texto adicional antes ou depois. Forne√ßa apenas o array JSON puro, sem formata√ß√£o markdown ou explica√ß√µes.

Formato √∫nico e esperado (n√£o fuja desse formato do JSON):
[
  {
    ""titulo"": ""Melhore a nomenclatura de vari√°veis"",
    ""descricao"": ""Vari√°veis com nomes pouco descritivos n√£o comunicam seu prop√≥sito. Nomes descritivos melhoram a legibilidade e manuten√ß√£o do c√≥digo."",
    ""exemplo"": ""Em vez de 'int x = calcularTotal();', use 'int totalProdutos = calcularTotalProdutos();'"",
    ""prioridade"": ""Alta"",
    ""tipo"": ""Nomenclatura"",
    ""dificuldade"": ""F√°cil"",
    ""referenciaArquivo"": ""Diversos arquivos"",
    ""recursosEstudo"": [""https://cleancoders.com/resources/naming-variables"", ""https://refactoring.guru/renaming""]
  }
]";
    }
    
    /// <summary>
    /// Modelo de requisi√ß√£o para o Ollama API
    /// </summary>
    public class OllamaRequest
    {
        [JsonPropertyName("model")]
        public string Model { get; set; }
        
        [JsonPropertyName("prompt")]
        public string Prompt { get; set; }
        
        [JsonPropertyName("temperature")]
        public float Temperature { get; set; }
        
        [JsonPropertyName("max_tokens")]
        public int MaxTokens { get; set; }
        
        [JsonPropertyName("stream")]
        public bool Stream { get; set; }
    }
    
    /// <summary>
    /// Modelo de resposta do Ollama API
    /// </summary>
    public class OllamaResponse
    {
        [JsonPropertyName("model")]
        public string Model { get; set; }
        
        [JsonPropertyName("response")]
        public string Response { get; set; }
        
        [JsonPropertyName("total_duration")]
        public long TotalDuration { get; set; }
        
        [JsonPropertyName("prompt_eval_count")]
        public int PromptEvalCount { get; set; }
        
        [JsonPropertyName("eval_count")]
        public int EvalCount { get; set; }
    }
    
    /// <summary>
    /// Modelo para a resposta da listagem de modelos dispon√≠veis
    /// </summary>
    public class OllamaModelosResponse
    {
        [JsonPropertyName("models")]
        public List<OllamaModelInfo> Models { get; set; }
    }
    
    /// <summary>
    /// Informa√ß√µes sobre um modelo no Ollama
    /// </summary>
    public class OllamaModelInfo
    {
        [JsonPropertyName("name")]
        public string Name { get; set; }
        
        [JsonPropertyName("modified_at")]
        public string ModifiedAt { get; set; }
        
        [JsonPropertyName("size")]
        public long Size { get; set; }
    }
    
    #endregion
} 